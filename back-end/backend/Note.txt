

* add Gatewey for 

Ban / 
mute /
 change password /
 remove password /
add password/
check pass /
set as admin/

* channel service 

in removeUserFromAdmin need to make sure that the requested is an admin first :

hash all the passwords : 

add a method or just  call campare the password :







"I'm a full-stack developer proficient in a variety of programming languages and technologies. My experience spans from frontend technologies like react, JavaScript/TypeScript to backend technologies such as nest.js, Express.js, and database management. I enjoy tackling challenging problems and constantly strive to expand my knowledge to deliver effective solutions.

As a collaborative team member, I actively collaborate with my colleagues to ensure that our combined efforts result in great projects. My goal is to contribute to the team's success by delivering high-quality code and innovative solutions."




will I am studying for my network diploma . I discovered the tech filed and how interesting it is, so my journey in the tech world continues when i get to 1337,wish is a perfect environment to embrace my self-learning abilities. I get the chance to demonstrate a remarkable capacity for adapt  to new challenges and technologies.






    socket.on("newChannelMessage", (newMessage) => {
      console.log("actiiiiiv", activeChannel);
      console.log("newChannelMessage", newMessage); 
      if(newMessage.channelId === activeChannel)
        setMessages((prevMessages) => [...prevMessages, newMessage.message]);
    });





    _________________________________
    import { useEffect, useState } from "react";
import { useSocket } from "../../../Socketio";
import { chatIcons } from "../../../constants/index.js";

function ChannelList({
  activeChannel,
  currentUserToken,
  setActiveChannel,
  typeOfChannel,
  setTypeOfChannel,
}) {
  const [channels, setChannels] = useState([]);
  //   const [typeOfChannel, setTypeOfChannel] = useState("");
  const socket: any = useSocket();

  // console.log("typeOfChannel is ", typeOfChannel); //! hehowa fin 7atit lik type of channel

  useEffect(() => {
    socket.on("channelType", (data) => {
      console.log("Received channelType:", data);
      setTypeOfChannel(data.channelType);
    });

    // socket.emit("getUserChannels", currentUserToken.id);

    socket.on("userChannels", (userChannels) => {
      // console.log("Received userChannels:", userChannels);
      setChannels(userChannels);
      // console.log("userChannels", userChannels);
    });

    socket.on("newChannelCreated", (newChannel) => {
      setChannels((prevChannels) => [...prevChannels, newChannel]);
      // console.log("new channel created", newChannel);
    });

    return () => {
      socket.off("channelType");
      socket.off("userChannels");
      socket.off("newChannelCreated");
    };
  }, [socket, activeChannel]);

  useEffect(() => {
    socket.emit("getUserChannels", currentUserToken.id);
  },[activeChannel]);

  const handleChannelClick = (activeChannel) => {
    setActiveChannel(activeChannel);
    socket.emit("getChannelType", activeChannel);
    socket.emit("autojoined", {channelId: activeChannel, userId: currentUserToken.id})
    console.log("active channel is => ", activeChannel);
  };

  return (
    <div className={`flex flex-col overflow-y-auto gap-2`}>
      {channels.map((channel) => (
        <div
          key={channel.id}
          className={`flex items-center p-2 px-4 bg-bLight_5/10 rounded-full cursor-pointer ${
            channel.id === activeChannel ? "bg-bLight_5/50" : "banana"
          }`}
          onClick={() => handleChannelClick(channel.id)}
        >
          {/* {console.log("channel id is ", channel.id, "active channel is ", activeChannel)} */}
          <div className="text-bLight_4">#{channel.Channel}</div>
          {/* lock icon for protectd channel */}
          {channel.protected ? <div className={`text-bLight_5 ml-auto`}>{<chatIcons.lock />}</div> : null}
        </div>
      ))}
    </div>
  );
}

export default ChannelList;
